// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_out/chromecast/cast_channel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stream_out/chromecast/cast_channel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace castchannel {

void protobuf_ShutdownFile_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto() {
  CastMessage_default_instance_.Shutdown();
  AuthChallenge_default_instance_.Shutdown();
  AuthResponse_default_instance_.Shutdown();
  AuthError_default_instance_.Shutdown();
  DeviceAuthMessage_default_instance_.Shutdown();
}

void protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CastMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthChallenge_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthError_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeviceAuthMessage_default_instance_.DefaultConstruct();
  CastMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthChallenge_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthError_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeviceAuthMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_once_);
void protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_once_,
                 &protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_impl);
}
void protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_once_);
void protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_once_,
                 &protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto {
  StaticDescriptorInitializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto() {
    protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  }
} static_descriptor_initializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCastMessage(
    CastMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CastMessage_ProtocolVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastMessage_ProtocolVersion CastMessage::CASTV2_1_0;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MIN;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MAX;
const int CastMessage::ProtocolVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastMessage_PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastMessage_PayloadType CastMessage::STRING;
const CastMessage_PayloadType CastMessage::BINARY;
const CastMessage_PayloadType CastMessage::PayloadType_MIN;
const CastMessage_PayloadType CastMessage::PayloadType_MAX;
const int CastMessage::PayloadType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastMessage::kProtocolVersionFieldNumber;
const int CastMessage::kSourceIdFieldNumber;
const int CastMessage::kDestinationIdFieldNumber;
const int CastMessage::kNamespaceFieldNumber;
const int CastMessage::kPayloadTypeFieldNumber;
const int CastMessage::kPayloadUtf8FieldNumber;
const int CastMessage::kPayloadBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastMessage::CastMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.CastMessage)
}

void CastMessage::InitAsDefaultInstance() {
}

CastMessage::CastMessage(const CastMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:castchannel.CastMessage)
}

void CastMessage::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_version_, 0, reinterpret_cast<char*>(&payload_type_) -
    reinterpret_cast<char*>(&protocol_version_) + sizeof(payload_type_));
}

CastMessage::~CastMessage() {
  // @@protoc_insertion_point(destructor:castchannel.CastMessage)
  SharedDtor();
}

void CastMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastMessage& CastMessage::default_instance() {
  protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CastMessage> CastMessage_default_instance_;

CastMessage* CastMessage::New(::google::protobuf::Arena* arena) const {
  CastMessage* n = new CastMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.CastMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CastMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CastMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(protocol_version_, payload_type_);
    if (has_source_id()) {
      source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination_id()) {
      destination_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_namespace_()) {
      namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payload_utf8()) {
      payload_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payload_binary()) {
      payload_binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForCastMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:castchannel.CastMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castchannel::CastMessage_ProtocolVersion_IsValid(value)) {
            set_protocol_version(static_cast< ::castchannel::CastMessage_ProtocolVersion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_id;
        break;
      }

      // required string source_id = 2;
      case 2: {
        if (tag == 18) {
         parse_source_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_destination_id;
        break;
      }

      // required string destination_id = 3;
      case 3: {
        if (tag == 26) {
         parse_destination_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_namespace;
        break;
      }

      // required string namespace = 4;
      case 4: {
        if (tag == 34) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_payload_type;
        break;
      }

      // required .castchannel.CastMessage.PayloadType payload_type = 5;
      case 5: {
        if (tag == 40) {
         parse_payload_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castchannel::CastMessage_PayloadType_IsValid(value)) {
            set_payload_type(static_cast< ::castchannel::CastMessage_PayloadType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_payload_utf8;
        break;
      }

      // optional string payload_utf8 = 6;
      case 6: {
        if (tag == 50) {
         parse_payload_utf8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload_utf8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_payload_binary;
        break;
      }

      // optional bytes payload_binary = 7;
      case 7: {
        if (tag == 58) {
         parse_payload_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_binary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.CastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.CastMessage)
  return false;
#undef DO_
}

void CastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.CastMessage)
  // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol_version(), output);
  }

  // required string source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_id(), output);
  }

  // required string destination_id = 3;
  if (has_destination_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination_id(), output);
  }

  // required string namespace = 4;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_(), output);
  }

  // required .castchannel.CastMessage.PayloadType payload_type = 5;
  if (has_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->payload_type(), output);
  }

  // optional string payload_utf8 = 6;
  if (has_payload_utf8()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payload_utf8(), output);
  }

  // optional bytes payload_binary = 7;
  if (has_payload_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->payload_binary(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.CastMessage)
}

size_t CastMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:castchannel.CastMessage)
  size_t total_size = 0;

  if (has_protocol_version()) {
    // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());
  }

  if (has_source_id()) {
    // required string source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());
  }

  if (has_destination_id()) {
    // required string destination_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_id());
  }

  if (has_namespace_()) {
    // required string namespace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  if (has_payload_type()) {
    // required .castchannel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());
  }

  return total_size;
}
size_t CastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.CastMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());

    // required string source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());

    // required string destination_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_id());

    // required string namespace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());

    // required .castchannel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional string payload_utf8 = 6;
    if (has_payload_utf8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload_utf8());
    }

    // optional bytes payload_binary = 7;
    if (has_payload_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_binary());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastMessage*>(&from));
}

void CastMessage::MergeFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.CastMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CastMessage::UnsafeMergeFrom(const CastMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_source_id()) {
      set_has_source_id();
      source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
    }
    if (from.has_destination_id()) {
      set_has_destination_id();
      destination_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_id_);
    }
    if (from.has_namespace_()) {
      set_has_namespace_();
      namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
    }
    if (from.has_payload_type()) {
      set_payload_type(from.payload_type());
    }
    if (from.has_payload_utf8()) {
      set_has_payload_utf8();
      payload_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_utf8_);
    }
    if (from.has_payload_binary()) {
      set_has_payload_binary();
      payload_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_binary_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CastMessage::CopyFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.CastMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CastMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CastMessage::Swap(CastMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastMessage::InternalSwap(CastMessage* other) {
  std::swap(protocol_version_, other->protocol_version_);
  source_id_.Swap(&other->source_id_);
  destination_id_.Swap(&other->destination_id_);
  namespace__.Swap(&other->namespace__);
  std::swap(payload_type_, other->payload_type_);
  payload_utf8_.Swap(&other->payload_utf8_);
  payload_binary_.Swap(&other->payload_binary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastMessage::GetTypeName() const {
  return "castchannel.CastMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastMessage

// required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
bool CastMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastMessage::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CastMessage::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastMessage::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
::castchannel::CastMessage_ProtocolVersion CastMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.protocol_version)
  return static_cast< ::castchannel::CastMessage_ProtocolVersion >(protocol_version_);
}
void CastMessage::set_protocol_version(::castchannel::CastMessage_ProtocolVersion value) {
  assert(::castchannel::CastMessage_ProtocolVersion_IsValid(value));
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.protocol_version)
}

// required string source_id = 2;
bool CastMessage::has_source_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastMessage::set_has_source_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CastMessage::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastMessage::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_id();
}
const ::std::string& CastMessage::source_id() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.source_id)
  return source_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_source_id(const ::std::string& value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.source_id)
}
void CastMessage::set_source_id(const char* value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.source_id)
}
void CastMessage::set_source_id(const char* value, size_t size) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.source_id)
}
::std::string* CastMessage::mutable_source_id() {
  set_has_source_id();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_source_id() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.source_id)
  clear_has_source_id();
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    set_has_source_id();
  } else {
    clear_has_source_id();
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.source_id)
}

// required string destination_id = 3;
bool CastMessage::has_destination_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastMessage::set_has_destination_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CastMessage::clear_has_destination_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastMessage::clear_destination_id() {
  destination_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_id();
}
const ::std::string& CastMessage::destination_id() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.destination_id)
  return destination_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_destination_id(const ::std::string& value) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.destination_id)
}
void CastMessage::set_destination_id(const char* value) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.destination_id)
}
void CastMessage::set_destination_id(const char* value, size_t size) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.destination_id)
}
::std::string* CastMessage::mutable_destination_id() {
  set_has_destination_id();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.destination_id)
  return destination_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_destination_id() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.destination_id)
  clear_has_destination_id();
  return destination_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_destination_id(::std::string* destination_id) {
  if (destination_id != NULL) {
    set_has_destination_id();
  } else {
    clear_has_destination_id();
  }
  destination_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_id);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.destination_id)
}

// required string namespace = 4;
bool CastMessage::has_namespace_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastMessage::set_has_namespace_() {
  _has_bits_[0] |= 0x00000008u;
}
void CastMessage::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastMessage::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_namespace_();
}
const ::std::string& CastMessage::namespace_() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.namespace)
  return namespace__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.namespace)
}
void CastMessage::set_namespace_(const char* value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.namespace)
}
void CastMessage::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.namespace)
}
::std::string* CastMessage::mutable_namespace_() {
  set_has_namespace_();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_namespace_() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.namespace)
  clear_has_namespace_();
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    set_has_namespace_();
  } else {
    clear_has_namespace_();
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.namespace)
}

// required .castchannel.CastMessage.PayloadType payload_type = 5;
bool CastMessage::has_payload_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastMessage::set_has_payload_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CastMessage::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastMessage::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
::castchannel::CastMessage_PayloadType CastMessage::payload_type() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.payload_type)
  return static_cast< ::castchannel::CastMessage_PayloadType >(payload_type_);
}
void CastMessage::set_payload_type(::castchannel::CastMessage_PayloadType value) {
  assert(::castchannel::CastMessage_PayloadType_IsValid(value));
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.payload_type)
}

// optional string payload_utf8 = 6;
bool CastMessage::has_payload_utf8() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastMessage::set_has_payload_utf8() {
  _has_bits_[0] |= 0x00000020u;
}
void CastMessage::clear_has_payload_utf8() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastMessage::clear_payload_utf8() {
  payload_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_utf8();
}
const ::std::string& CastMessage::payload_utf8() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.payload_utf8)
  return payload_utf8_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_payload_utf8(const ::std::string& value) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.payload_utf8)
}
void CastMessage::set_payload_utf8(const char* value) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.payload_utf8)
}
void CastMessage::set_payload_utf8(const char* value, size_t size) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.payload_utf8)
}
::std::string* CastMessage::mutable_payload_utf8() {
  set_has_payload_utf8();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.payload_utf8)
  return payload_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_payload_utf8() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.payload_utf8)
  clear_has_payload_utf8();
  return payload_utf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_payload_utf8(::std::string* payload_utf8) {
  if (payload_utf8 != NULL) {
    set_has_payload_utf8();
  } else {
    clear_has_payload_utf8();
  }
  payload_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_utf8);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.payload_utf8)
}

// optional bytes payload_binary = 7;
bool CastMessage::has_payload_binary() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastMessage::set_has_payload_binary() {
  _has_bits_[0] |= 0x00000040u;
}
void CastMessage::clear_has_payload_binary() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastMessage::clear_payload_binary() {
  payload_binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_binary();
}
const ::std::string& CastMessage::payload_binary() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.payload_binary)
  return payload_binary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_payload_binary(const ::std::string& value) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.payload_binary)
}
void CastMessage::set_payload_binary(const char* value) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.payload_binary)
}
void CastMessage::set_payload_binary(const void* value, size_t size) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.payload_binary)
}
::std::string* CastMessage::mutable_payload_binary() {
  set_has_payload_binary();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.payload_binary)
  return payload_binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_payload_binary() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.payload_binary)
  clear_has_payload_binary();
  return payload_binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_payload_binary(::std::string* payload_binary) {
  if (payload_binary != NULL) {
    set_has_payload_binary();
  } else {
    clear_has_payload_binary();
  }
  payload_binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_binary);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.payload_binary)
}

inline const CastMessage* CastMessage::internal_default_instance() {
  return &CastMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAuthChallenge(
    AuthChallenge* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthChallenge::AuthChallenge()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.AuthChallenge)
}

void AuthChallenge::InitAsDefaultInstance() {
}

AuthChallenge::AuthChallenge(const AuthChallenge& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:castchannel.AuthChallenge)
}

void AuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthChallenge::~AuthChallenge() {
  // @@protoc_insertion_point(destructor:castchannel.AuthChallenge)
  SharedDtor();
}

void AuthChallenge::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthChallenge& AuthChallenge::default_instance() {
  protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthChallenge> AuthChallenge_default_instance_;

AuthChallenge* AuthChallenge::New(::google::protobuf::Arena* arena) const {
  AuthChallenge* n = new AuthChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.AuthChallenge)
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForAuthChallenge, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:castchannel.AuthChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.AuthChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.AuthChallenge)
  return false;
#undef DO_
}

void AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.AuthChallenge)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.AuthChallenge)
}

size_t AuthChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.AuthChallenge)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthChallenge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthChallenge*>(&from));
}

void AuthChallenge::MergeFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.AuthChallenge)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthChallenge::UnsafeMergeFrom(const AuthChallenge& from) {
  GOOGLE_DCHECK(&from != this);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AuthChallenge::CopyFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.AuthChallenge)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthChallenge::IsInitialized() const {

  return true;
}

void AuthChallenge::Swap(AuthChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthChallenge::InternalSwap(AuthChallenge* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthChallenge::GetTypeName() const {
  return "castchannel.AuthChallenge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthChallenge

inline const AuthChallenge* AuthChallenge::internal_default_instance() {
  return &AuthChallenge_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAuthResponse(
    AuthResponse* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResponse::kSignatureFieldNumber;
const int AuthResponse::kClientAuthCertificateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResponse::AuthResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.AuthResponse)
}

void AuthResponse::InitAsDefaultInstance() {
}

AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:castchannel.AuthResponse)
}

void AuthResponse::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:castchannel.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthResponse& AuthResponse::default_instance() {
  protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthResponse> AuthResponse_default_instance_;

AuthResponse* AuthResponse::New(::google::protobuf::Arena* arena) const {
  AuthResponse* n = new AuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.AuthResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_signature()) {
      signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_client_auth_certificate()) {
      client_auth_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForAuthResponse, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:castchannel.AuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_auth_certificate;
        break;
      }

      // required bytes client_auth_certificate = 2;
      case 2: {
        if (tag == 18) {
         parse_client_auth_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_auth_certificate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.AuthResponse)
  // required bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // required bytes client_auth_certificate = 2;
  if (has_client_auth_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_auth_certificate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.AuthResponse)
}

size_t AuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:castchannel.AuthResponse)
  size_t total_size = 0;

  if (has_signature()) {
    // required bytes signature = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_client_auth_certificate()) {
    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_auth_certificate());
  }

  return total_size;
}
size_t AuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.AuthResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes signature = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_auth_certificate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResponse*>(&from));
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.AuthResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthResponse::UnsafeMergeFrom(const AuthResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (from.has_client_auth_certificate()) {
      set_has_client_auth_certificate();
      client_auth_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_auth_certificate_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.AuthResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResponse::InternalSwap(AuthResponse* other) {
  signature_.Swap(&other->signature_);
  client_auth_certificate_.Swap(&other->client_auth_certificate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthResponse::GetTypeName() const {
  return "castchannel.AuthResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthResponse

// required bytes signature = 1;
bool AuthResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& AuthResponse::signature() const {
  // @@protoc_insertion_point(field_get:castchannel.AuthResponse.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.AuthResponse.signature)
}
void AuthResponse::set_signature(const char* value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.AuthResponse.signature)
}
void AuthResponse::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.AuthResponse.signature)
}
::std::string* AuthResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:castchannel.AuthResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthResponse::release_signature() {
  // @@protoc_insertion_point(field_release:castchannel.AuthResponse.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:castchannel.AuthResponse.signature)
}

// required bytes client_auth_certificate = 2;
bool AuthResponse::has_client_auth_certificate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AuthResponse::set_has_client_auth_certificate() {
  _has_bits_[0] |= 0x00000002u;
}
void AuthResponse::clear_has_client_auth_certificate() {
  _has_bits_[0] &= ~0x00000002u;
}
void AuthResponse::clear_client_auth_certificate() {
  client_auth_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_auth_certificate();
}
const ::std::string& AuthResponse::client_auth_certificate() const {
  // @@protoc_insertion_point(field_get:castchannel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_client_auth_certificate(const ::std::string& value) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.AuthResponse.client_auth_certificate)
}
void AuthResponse::set_client_auth_certificate(const char* value) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.AuthResponse.client_auth_certificate)
}
void AuthResponse::set_client_auth_certificate(const void* value, size_t size) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.AuthResponse.client_auth_certificate)
}
::std::string* AuthResponse::mutable_client_auth_certificate() {
  set_has_client_auth_certificate();
  // @@protoc_insertion_point(field_mutable:castchannel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthResponse::release_client_auth_certificate() {
  // @@protoc_insertion_point(field_release:castchannel.AuthResponse.client_auth_certificate)
  clear_has_client_auth_certificate();
  return client_auth_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_allocated_client_auth_certificate(::std::string* client_auth_certificate) {
  if (client_auth_certificate != NULL) {
    set_has_client_auth_certificate();
  } else {
    clear_has_client_auth_certificate();
  }
  client_auth_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_auth_certificate);
  // @@protoc_insertion_point(field_set_allocated:castchannel.AuthResponse.client_auth_certificate)
}

inline const AuthResponse* AuthResponse::internal_default_instance() {
  return &AuthResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAuthError(
    AuthError* ptr) {
  return ptr->mutable_unknown_fields();
}

bool AuthError_ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthError_ErrorType AuthError::INTERNAL_ERROR;
const AuthError_ErrorType AuthError::NO_TLS;
const AuthError_ErrorType AuthError::ErrorType_MIN;
const AuthError_ErrorType AuthError::ErrorType_MAX;
const int AuthError::ErrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthError::kErrorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthError::AuthError()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.AuthError)
}

void AuthError::InitAsDefaultInstance() {
}

AuthError::AuthError(const AuthError& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:castchannel.AuthError)
}

void AuthError::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_type_ = 0;
}

AuthError::~AuthError() {
  // @@protoc_insertion_point(destructor:castchannel.AuthError)
  SharedDtor();
}

void AuthError::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthError& AuthError::default_instance() {
  protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthError> AuthError_default_instance_;

AuthError* AuthError::New(::google::protobuf::Arena* arena) const {
  AuthError* n = new AuthError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthError::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.AuthError)
  error_type_ = 0;
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForAuthError, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:castchannel.AuthError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .castchannel.AuthError.ErrorType error_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castchannel::AuthError_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::castchannel::AuthError_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.AuthError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.AuthError)
  return false;
#undef DO_
}

void AuthError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.AuthError)
  // required .castchannel.AuthError.ErrorType error_type = 1;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.AuthError)
}

size_t AuthError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.AuthError)
  size_t total_size = 0;

  // required .castchannel.AuthError.ErrorType error_type = 1;
  if (has_error_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthError*>(&from));
}

void AuthError::MergeFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.AuthError)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthError::UnsafeMergeFrom(const AuthError& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AuthError::CopyFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.AuthError)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthError::Swap(AuthError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthError::InternalSwap(AuthError* other) {
  std::swap(error_type_, other->error_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthError::GetTypeName() const {
  return "castchannel.AuthError";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthError

// required .castchannel.AuthError.ErrorType error_type = 1;
bool AuthError::has_error_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthError::set_has_error_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthError::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthError::clear_error_type() {
  error_type_ = 0;
  clear_has_error_type();
}
::castchannel::AuthError_ErrorType AuthError::error_type() const {
  // @@protoc_insertion_point(field_get:castchannel.AuthError.error_type)
  return static_cast< ::castchannel::AuthError_ErrorType >(error_type_);
}
void AuthError::set_error_type(::castchannel::AuthError_ErrorType value) {
  assert(::castchannel::AuthError_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:castchannel.AuthError.error_type)
}

inline const AuthError* AuthError::internal_default_instance() {
  return &AuthError_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAuthMessage(
    DeviceAuthMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAuthMessage::kChallengeFieldNumber;
const int DeviceAuthMessage::kResponseFieldNumber;
const int DeviceAuthMessage::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAuthMessage::DeviceAuthMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.DeviceAuthMessage)
}

void DeviceAuthMessage::InitAsDefaultInstance() {
  challenge_ = const_cast< ::castchannel::AuthChallenge*>(
      ::castchannel::AuthChallenge::internal_default_instance());
  response_ = const_cast< ::castchannel::AuthResponse*>(
      ::castchannel::AuthResponse::internal_default_instance());
  error_ = const_cast< ::castchannel::AuthError*>(
      ::castchannel::AuthError::internal_default_instance());
}

DeviceAuthMessage::DeviceAuthMessage(const DeviceAuthMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:castchannel.DeviceAuthMessage)
}

void DeviceAuthMessage::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_ = NULL;
  response_ = NULL;
  error_ = NULL;
}

DeviceAuthMessage::~DeviceAuthMessage() {
  // @@protoc_insertion_point(destructor:castchannel.DeviceAuthMessage)
  SharedDtor();
}

void DeviceAuthMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &DeviceAuthMessage_default_instance_.get()) {
    delete challenge_;
    delete response_;
    delete error_;
  }
}

void DeviceAuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAuthMessage& DeviceAuthMessage::default_instance() {
  protobuf_InitDefaults_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceAuthMessage> DeviceAuthMessage_default_instance_;

DeviceAuthMessage* DeviceAuthMessage::New(::google::protobuf::Arena* arena) const {
  DeviceAuthMessage* n = new DeviceAuthMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.DeviceAuthMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_challenge()) {
      if (challenge_ != NULL) challenge_->::castchannel::AuthChallenge::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::castchannel::AuthResponse::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::castchannel::AuthError::Clear();
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForDeviceAuthMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:castchannel.DeviceAuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .castchannel.AuthChallenge challenge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .castchannel.AuthResponse response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .castchannel.AuthError error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.DeviceAuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.DeviceAuthMessage)
  return false;
#undef DO_
}

void DeviceAuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.DeviceAuthMessage)
  // optional .castchannel.AuthChallenge challenge = 1;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->challenge_, output);
  }

  // optional .castchannel.AuthResponse response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->response_, output);
  }

  // optional .castchannel.AuthError error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->error_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.DeviceAuthMessage)
}

size_t DeviceAuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.DeviceAuthMessage)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .castchannel.AuthChallenge challenge = 1;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->challenge_);
    }

    // optional .castchannel.AuthResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

    // optional .castchannel.AuthError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAuthMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAuthMessage*>(&from));
}

void DeviceAuthMessage::MergeFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.DeviceAuthMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceAuthMessage::UnsafeMergeFrom(const DeviceAuthMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge()) {
      mutable_challenge()->::castchannel::AuthChallenge::MergeFrom(from.challenge());
    }
    if (from.has_response()) {
      mutable_response()->::castchannel::AuthResponse::MergeFrom(from.response());
    }
    if (from.has_error()) {
      mutable_error()->::castchannel::AuthError::MergeFrom(from.error());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DeviceAuthMessage::CopyFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.DeviceAuthMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceAuthMessage::IsInitialized() const {

  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void DeviceAuthMessage::Swap(DeviceAuthMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAuthMessage::InternalSwap(DeviceAuthMessage* other) {
  std::swap(challenge_, other->challenge_);
  std::swap(response_, other->response_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAuthMessage::GetTypeName() const {
  return "castchannel.DeviceAuthMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAuthMessage

// optional .castchannel.AuthChallenge challenge = 1;
bool DeviceAuthMessage::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAuthMessage::set_has_challenge() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAuthMessage::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAuthMessage::clear_challenge() {
  if (challenge_ != NULL) challenge_->::castchannel::AuthChallenge::Clear();
  clear_has_challenge();
}
const ::castchannel::AuthChallenge& DeviceAuthMessage::challenge() const {
  // @@protoc_insertion_point(field_get:castchannel.DeviceAuthMessage.challenge)
  return challenge_ != NULL ? *challenge_
                         : *::castchannel::AuthChallenge::internal_default_instance();
}
::castchannel::AuthChallenge* DeviceAuthMessage::mutable_challenge() {
  set_has_challenge();
  if (challenge_ == NULL) {
    challenge_ = new ::castchannel::AuthChallenge;
  }
  // @@protoc_insertion_point(field_mutable:castchannel.DeviceAuthMessage.challenge)
  return challenge_;
}
::castchannel::AuthChallenge* DeviceAuthMessage::release_challenge() {
  // @@protoc_insertion_point(field_release:castchannel.DeviceAuthMessage.challenge)
  clear_has_challenge();
  ::castchannel::AuthChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
void DeviceAuthMessage::set_allocated_challenge(::castchannel::AuthChallenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  // @@protoc_insertion_point(field_set_allocated:castchannel.DeviceAuthMessage.challenge)
}

// optional .castchannel.AuthResponse response = 2;
bool DeviceAuthMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceAuthMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceAuthMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceAuthMessage::clear_response() {
  if (response_ != NULL) response_->::castchannel::AuthResponse::Clear();
  clear_has_response();
}
const ::castchannel::AuthResponse& DeviceAuthMessage::response() const {
  // @@protoc_insertion_point(field_get:castchannel.DeviceAuthMessage.response)
  return response_ != NULL ? *response_
                         : *::castchannel::AuthResponse::internal_default_instance();
}
::castchannel::AuthResponse* DeviceAuthMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::castchannel::AuthResponse;
  }
  // @@protoc_insertion_point(field_mutable:castchannel.DeviceAuthMessage.response)
  return response_;
}
::castchannel::AuthResponse* DeviceAuthMessage::release_response() {
  // @@protoc_insertion_point(field_release:castchannel.DeviceAuthMessage.response)
  clear_has_response();
  ::castchannel::AuthResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void DeviceAuthMessage::set_allocated_response(::castchannel::AuthResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:castchannel.DeviceAuthMessage.response)
}

// optional .castchannel.AuthError error = 3;
bool DeviceAuthMessage::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceAuthMessage::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceAuthMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceAuthMessage::clear_error() {
  if (error_ != NULL) error_->::castchannel::AuthError::Clear();
  clear_has_error();
}
const ::castchannel::AuthError& DeviceAuthMessage::error() const {
  // @@protoc_insertion_point(field_get:castchannel.DeviceAuthMessage.error)
  return error_ != NULL ? *error_
                         : *::castchannel::AuthError::internal_default_instance();
}
::castchannel::AuthError* DeviceAuthMessage::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::castchannel::AuthError;
  }
  // @@protoc_insertion_point(field_mutable:castchannel.DeviceAuthMessage.error)
  return error_;
}
::castchannel::AuthError* DeviceAuthMessage::release_error() {
  // @@protoc_insertion_point(field_release:castchannel.DeviceAuthMessage.error)
  clear_has_error();
  ::castchannel::AuthError* temp = error_;
  error_ = NULL;
  return temp;
}
void DeviceAuthMessage::set_allocated_error(::castchannel::AuthError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:castchannel.DeviceAuthMessage.error)
}

inline const DeviceAuthMessage* DeviceAuthMessage::internal_default_instance() {
  return &DeviceAuthMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace castchannel

// @@protoc_insertion_point(global_scope)
